/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FeishuSharePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/constants.ts
var FEISHU_CONFIG = {
  // 飞书开放平台 API 基础 URL
  API_BASE_URL: "https://open.feishu.cn/open-apis",
  // OAuth 相关 URL
  OAUTH_BASE_URL: "https://open.feishu.cn/open-apis/authen/v1",
  AUTHORIZE_URL: "https://open.feishu.cn/open-apis/authen/v1/authorize",
  TOKEN_URL: "https://open.feishu.cn/open-apis/authen/v1/access_token",
  REFRESH_TOKEN_URL: "https://open.feishu.cn/open-apis/authen/v1/refresh_access_token",
  // 重定向 URI（使用不会消费授权码的地址）
  REDIRECT_URI: "https://example.com/callback",
  // 代理服务器配置
  PROXY_URL: "http://localhost:3001/proxy",
  // API 权限范围
  SCOPES: [
    "contact:user.base:readonly",
    // 读取用户基本信息
    "docx:document",
    // 创建和管理文档
    "drive:drive"
    // 访问云文档
  ].join(" ")
};
var DEFAULT_SETTINGS = {
  appId: "",
  appSecret: "",
  proxyUrl: "https://md2feishu.xinqi.life",
  // 默认使用云端Python代理
  proxyType: "cloud",
  // 默认使用云端服务器
  accessToken: "",
  refreshToken: "",
  userInfo: null,
  defaultFolderId: "",
  defaultFolderName: "\u6211\u7684\u7A7A\u95F4"
};
var MESSAGES = {
  SUCCESS: {
    SHARE_SUCCESS: "\u5206\u4EAB\u6210\u529F\uFF01\u5DF2\u521B\u5EFA\u98DE\u4E66\u6587\u6863\uFF1A",
    AUTH_SUCCESS: "\u98DE\u4E66\u6388\u6743\u6210\u529F\uFF01",
    SETTINGS_SAVED: "\u8BBE\u7F6E\u5DF2\u4FDD\u5B58"
  },
  ERROR: {
    NO_ACTIVE_FILE: "\u8BF7\u5148\u6253\u5F00\u4E00\u4E2A Markdown \u6587\u4EF6",
    NOT_MARKDOWN_FILE: "\u5F53\u524D\u6587\u4EF6\u7C7B\u578B\u4E0D\u652F\u6301\u5206\u4EAB\u5230\u98DE\u4E66",
    AUTH_REQUIRED: "\u8BF7\u5148\u5B8C\u6210\u98DE\u4E66\u6388\u6743",
    AUTH_FAILED: "\u98DE\u4E66\u6388\u6743\u5931\u8D25",
    SHARE_FAILED: "\u5206\u4EAB\u5931\u8D25",
    NETWORK_ERROR: "\u7F51\u7EDC\u8FDE\u63A5\u9519\u8BEF",
    UNKNOWN_ERROR: "\u672A\u77E5\u9519\u8BEF",
    FOLDER_NOT_FOUND: '\u76EE\u6807\u6587\u4EF6\u5939\u65E0\u6548\uFF0C\u5C06\u4E0A\u4F20\u5230"\u6211\u7684\u7A7A\u95F4"'
  },
  INFO: {
    SHARING: "\u6B63\u5728\u5206\u4EAB\u5230\u98DE\u4E66...",
    AUTHORIZING: "\u6B63\u5728\u8FDB\u884C\u98DE\u4E66\u6388\u6743...",
    LOADING_FOLDERS: "\u6B63\u5728\u52A0\u8F7D\u6587\u4EF6\u5939\u5217\u8868..."
  }
};
var FILE_CONSTANTS = {
  MARKDOWN_EXTENSIONS: [".md", ".markdown"],
  MAX_TITLE_LENGTH: 100,
  MAX_CONTENT_SIZE: 10 * 1024 * 1024
  // 10MB
};

// src/settings.ts
var import_obsidian3 = require("obsidian");

// src/folder-select-modal.ts
var import_obsidian = require("obsidian");
var FolderSelectModal = class extends import_obsidian.Modal {
  constructor(app, feishuApi, onSelect) {
    super(app);
    this.folders = [];
    this.currentPath = [];
    this.loading = false;
    this.feishuApi = feishuApi;
    this.onSelect = onSelect;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u9009\u62E9\u98DE\u4E66\u6587\u4EF6\u5939" });
    this.createBreadcrumb(contentEl);
    const listContainer = contentEl.createDiv("folder-list-container");
    listContainer.style.cssText = `
			max-height: 400px;
			overflow-y: auto;
			border: 1px solid var(--background-modifier-border);
			border-radius: 4px;
			margin: 10px 0;
		`;
    const buttonContainer = contentEl.createDiv("modal-button-container");
    buttonContainer.style.cssText = `
			display: flex;
			justify-content: space-between;
			margin-top: 20px;
		`;
    const selectCurrentButton = buttonContainer.createEl("button", {
      text: "\u9009\u62E9\u5F53\u524D\u6587\u4EF6\u5939",
      cls: "mod-cta"
    });
    selectCurrentButton.addEventListener("click", () => {
      const currentFolder = this.currentPath.length > 0 ? this.currentPath[this.currentPath.length - 1] : null;
      this.onSelect(currentFolder);
      this.close();
    });
    const cancelButton = buttonContainer.createEl("button", {
      text: "\u53D6\u6D88"
    });
    cancelButton.addEventListener("click", () => {
      this.close();
    });
    this.loadFolders(listContainer);
  }
  /**
   * 创建面包屑导航
   */
  createBreadcrumb(containerEl) {
    const breadcrumbEl = containerEl.createDiv("folder-breadcrumb");
    breadcrumbEl.style.cssText = `
			padding: 12px;
			background: var(--background-secondary);
			border-radius: 6px;
			margin-bottom: 12px;
			font-size: 14px;
			border: 1px solid var(--background-modifier-border);
			display: flex;
			align-items: center;
			flex-wrap: wrap;
			gap: 4px;
		`;
    const rootEl = breadcrumbEl.createEl("span", {
      text: "\u{1F3E0} \u6211\u7684\u7A7A\u95F4",
      cls: "breadcrumb-item"
    });
    rootEl.style.cssText = `
			cursor: pointer;
			color: var(--text-accent);
			padding: 4px 8px;
			border-radius: 4px;
			transition: background-color 0.2s;
		`;
    rootEl.addEventListener("click", () => {
      this.navigateToRoot();
    });
    rootEl.addEventListener("mouseenter", () => {
      rootEl.style.backgroundColor = "var(--background-modifier-hover)";
    });
    rootEl.addEventListener("mouseleave", () => {
      rootEl.style.backgroundColor = "";
    });
    const uniquePath = this.getUniquePath();
    uniquePath.forEach((folder, index) => {
      const separatorEl = breadcrumbEl.createEl("span", { text: "\u203A" });
      separatorEl.style.cssText = `
				color: var(--text-muted);
				margin: 0 4px;
				font-weight: bold;
			`;
      const folderEl = breadcrumbEl.createEl("span", {
        text: `\u{1F4C1} ${folder.name}`,
        cls: "breadcrumb-item"
      });
      if (index < uniquePath.length - 1) {
        folderEl.style.cssText = `
					cursor: pointer;
					color: var(--text-accent);
					padding: 4px 8px;
					border-radius: 4px;
					transition: background-color 0.2s;
				`;
        folderEl.addEventListener("click", () => {
          this.navigateToUniqueFolder(index);
        });
        folderEl.addEventListener("mouseenter", () => {
          folderEl.style.backgroundColor = "var(--background-modifier-hover)";
        });
        folderEl.addEventListener("mouseleave", () => {
          folderEl.style.backgroundColor = "";
        });
      } else {
        folderEl.style.cssText = `
					color: var(--text-normal);
					padding: 4px 8px;
					border-radius: 4px;
					background: var(--background-modifier-border);
					font-weight: 500;
				`;
      }
    });
  }
  /**
   * 获取去重后的路径
   */
  getUniquePath() {
    const uniquePath = [];
    const seenTokens = /* @__PURE__ */ new Set();
    for (const folder of this.currentPath) {
      if (!seenTokens.has(folder.folder_token)) {
        seenTokens.add(folder.folder_token);
        uniquePath.push(folder);
      }
    }
    return uniquePath;
  }
  /**
   * 导航到去重路径中的指定文件夹
   */
  async navigateToUniqueFolder(index) {
    const uniquePath = this.getUniquePath();
    if (index >= 0 && index < uniquePath.length) {
      this.currentPath = uniquePath.slice(0, index + 1);
      const breadcrumbEl = this.contentEl.querySelector(".folder-breadcrumb");
      if (breadcrumbEl) {
        breadcrumbEl.remove();
        this.createBreadcrumb(this.contentEl);
      }
      const listContainer = this.contentEl.querySelector(".folder-list-container");
      if (listContainer) {
        await this.loadFolders(listContainer);
      }
    }
  }
  /**
   * 加载文件夹列表
   */
  async loadFolders(containerEl) {
    if (this.loading)
      return;
    this.loading = true;
    containerEl.empty();
    const loadingEl = containerEl.createDiv("loading-indicator");
    loadingEl.textContent = "\u6B63\u5728\u52A0\u8F7D\u6587\u4EF6\u5939...";
    loadingEl.style.cssText = `
			text-align: center;
			padding: 20px;
			color: var(--text-muted);
		`;
    try {
      const parentFolderId = this.currentPath.length > 0 ? this.currentPath[this.currentPath.length - 1].folder_token : void 0;
      const response = await this.feishuApi.getFolderList(parentFolderId);
      this.folders = response.data.folders;
      containerEl.empty();
      this.renderFolderList(containerEl);
    } catch (error) {
      console.error("Load folders error:", error);
      containerEl.empty();
      const errorEl = containerEl.createDiv("error-message");
      errorEl.textContent = `\u52A0\u8F7D\u5931\u8D25\uFF1A${error.message}`;
      errorEl.style.cssText = `
				text-align: center;
				padding: 20px;
				color: var(--text-error);
			`;
      const retryButton = containerEl.createEl("button", {
        text: "\u91CD\u8BD5"
      });
      retryButton.style.cssText = `
				display: block;
				margin: 10px auto;
			`;
      retryButton.addEventListener("click", () => {
        this.loadFolders(containerEl);
      });
    }
    this.loading = false;
  }
  /**
   * 渲染文件夹列表
   */
  renderFolderList(containerEl) {
    if (this.folders.length === 0) {
      const emptyEl = containerEl.createDiv("empty-message");
      emptyEl.textContent = "\u6B64\u6587\u4EF6\u5939\u4E3A\u7A7A";
      emptyEl.style.cssText = `
				text-align: center;
				padding: 20px;
				color: var(--text-muted);
			`;
      return;
    }
    this.folders.forEach((folder) => {
      const folderEl = containerEl.createDiv("folder-item");
      folderEl.style.cssText = `
				padding: 10px;
				border-bottom: 1px solid var(--background-modifier-border);
				cursor: pointer;
				display: flex;
				align-items: center;
				transition: background-color 0.2s;
			`;
      const iconEl = folderEl.createEl("span", { text: "\u{1F4C1}" });
      iconEl.style.marginRight = "10px";
      const nameEl = folderEl.createEl("span", { text: folder.name });
      nameEl.style.flex = "1";
      const arrowEl = folderEl.createEl("span", { text: "\u2192" });
      arrowEl.style.cssText = `
				color: var(--text-muted);
				margin-left: 10px;
			`;
      folderEl.addEventListener("mouseenter", () => {
        folderEl.style.backgroundColor = "var(--background-modifier-hover)";
      });
      folderEl.addEventListener("mouseleave", () => {
        folderEl.style.backgroundColor = "";
      });
      folderEl.addEventListener("click", () => {
        this.enterFolder(folder);
      });
    });
  }
  /**
   * 进入文件夹
   */
  async enterFolder(folder) {
    const existingIndex = this.currentPath.findIndex((f) => f.folder_token === folder.folder_token);
    if (existingIndex >= 0) {
      this.currentPath = this.currentPath.slice(0, existingIndex + 1);
    } else {
      this.currentPath.push(folder);
    }
    const breadcrumbEl = this.contentEl.querySelector(".folder-breadcrumb");
    if (breadcrumbEl) {
      breadcrumbEl.remove();
      this.createBreadcrumb(this.contentEl);
    }
    const listContainer = this.contentEl.querySelector(".folder-list-container");
    if (listContainer) {
      await this.loadFolders(listContainer);
    }
  }
  /**
   * 导航到根目录
   */
  async navigateToRoot() {
    this.currentPath = [];
    const breadcrumbEl = this.contentEl.querySelector(".folder-breadcrumb");
    if (breadcrumbEl) {
      breadcrumbEl.remove();
      this.createBreadcrumb(this.contentEl);
    }
    const listContainer = this.contentEl.querySelector(".folder-list-container");
    if (listContainer) {
      await this.loadFolders(listContainer);
    }
  }
  /**
   * 导航到指定层级的文件夹
   */
  async navigateToFolder(index) {
    this.currentPath = this.currentPath.slice(0, index + 1);
    const breadcrumbEl = this.contentEl.querySelector(".folder-breadcrumb");
    if (breadcrumbEl) {
      breadcrumbEl.remove();
      this.createBreadcrumb(this.contentEl);
    }
    const listContainer = this.contentEl.querySelector(".folder-list-container");
    if (listContainer) {
      await this.loadFolders(listContainer);
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/manual-auth-modal.ts
var import_obsidian2 = require("obsidian");
var ManualAuthModal = class extends import_obsidian2.Modal {
  constructor(app, authUrl, onComplete) {
    super(app);
    this.authUrl = authUrl;
    this.onComplete = onComplete;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u98DE\u4E66\u6388\u6743" });
    const descEl = contentEl.createDiv("auth-description");
    descEl.style.cssText = `
			margin: 20px 0;
			padding: 15px;
			background: var(--background-secondary);
			border-radius: 8px;
			line-height: 1.6;
		`;
    descEl.innerHTML = `
			<p><strong>\u{1F680} \u7B80\u5316\u6388\u6743\u6D41\u7A0B - \u53EA\u9700\u590D\u5236\u7C98\u8D34URL\uFF1A</strong></p>
			<ol>
				<li>\u70B9\u51FB\u4E0B\u65B9\u7684"\u6253\u5F00\u6388\u6743\u9875\u9762"\u6309\u94AE</li>
				<li>\u5728\u5F39\u51FA\u7684\u98DE\u4E66\u9875\u9762\u4E2D\u767B\u5F55\u5E76\u786E\u8BA4\u6388\u6743</li>
				<li>\u6388\u6743\u6210\u529F\u540E\uFF0C\u4F1A\u8DF3\u8F6C\u5230\u4E00\u4E2A\u663E\u793A JSON \u6570\u636E\u7684\u9875\u9762</li>
				<li><strong>\u590D\u5236\u6D4F\u89C8\u5668\u5730\u5740\u680F\u7684\u5B8C\u6574URL</strong>\uFF08\u5305\u542B code= \u53C2\u6570\uFF09</li>
				<li>\u5C06\u5B8C\u6574URL\u7C98\u8D34\u5230\u4E0B\u65B9\u8F93\u5165\u6846\u4E2D</li>
				<li>\u70B9\u51FB"\u5B8C\u6210\u6388\u6743"\u6309\u94AE</li>
			</ol>
			<div style="background: var(--background-modifier-success); padding: 10px; border-radius: 4px; margin-top: 10px;">
				<strong>\u{1F4A1} \u63D0\u793A\uFF1A</strong>\u65E0\u9700\u624B\u52A8\u63D0\u53D6\u6388\u6743\u7801\uFF0C\u76F4\u63A5\u590D\u5236\u5B8C\u6574\u7684\u56DE\u8C03URL\u5373\u53EF\uFF01
			</div>
		`;
    const linkContainer = contentEl.createDiv("auth-link-container");
    linkContainer.style.cssText = `
			text-align: center;
			margin: 20px 0;
		`;
    const authButton = linkContainer.createEl("button", {
      text: "\u{1F517} \u6253\u5F00\u6388\u6743\u9875\u9762",
      cls: "mod-cta"
    });
    authButton.style.cssText = `
			padding: 12px 24px;
			font-size: 16px;
		`;
    authButton.addEventListener("click", () => {
      window.open(this.authUrl, "_blank");
    });
    const copyButton = linkContainer.createEl("button", {
      text: "\u{1F4CB} \u590D\u5236\u6388\u6743\u94FE\u63A5"
    });
    copyButton.style.cssText = `
			margin-left: 10px;
			padding: 12px 24px;
		`;
    copyButton.addEventListener("click", () => {
      navigator.clipboard.writeText(this.authUrl);
      new import_obsidian2.Notice("\u6388\u6743\u94FE\u63A5\u5DF2\u590D\u5236\u5230\u526A\u8D34\u677F");
    });
    const inputContainer = contentEl.createDiv("auth-input-container");
    inputContainer.style.cssText = `
			margin: 20px 0;
		`;
    const inputLabel = inputContainer.createEl("label", {
      text: "\u56DE\u8C03URL\uFF1A"
    });
    inputLabel.style.cssText = `
			display: block;
			margin-bottom: 8px;
			font-weight: bold;
		`;
    const codeInput = inputContainer.createEl("input", {
      type: "text",
      placeholder: "\u8BF7\u7C98\u8D34\u5B8C\u6574\u7684\u56DE\u8C03URL\uFF08\u5305\u542Bcode\u53C2\u6570\uFF09"
    });
    codeInput.style.cssText = `
			width: 100%;
			padding: 10px;
			border: 1px solid var(--background-modifier-border);
			border-radius: 4px;
			font-family: monospace;
			font-size: 12px;
		`;
    const exampleEl = inputContainer.createDiv("auth-example");
    exampleEl.style.cssText = `
			margin-top: 8px;
			font-size: 12px;
			color: var(--text-muted);
		`;
    exampleEl.innerHTML = `
			<strong>\u793A\u4F8BURL\uFF1A</strong><br>
			<code>https://httpbin.org/get?code=abc123def456&state=xyz789</code><br>
			<strong>\u{1F4A1} \u76F4\u63A5\u590D\u5236\u7C98\u8D34\u5373\u53EF\uFF0C\u65E0\u9700\u624B\u52A8\u63D0\u53D6\u6388\u6743\u7801\uFF01</strong>
		`;
    const buttonContainer = contentEl.createDiv("modal-button-container");
    buttonContainer.style.cssText = `
			display: flex;
			justify-content: space-between;
			margin-top: 30px;
		`;
    const completeButton = buttonContainer.createEl("button", {
      text: "\u2705 \u5B8C\u6210\u6388\u6743",
      cls: "mod-cta"
    });
    completeButton.addEventListener("click", () => {
      const code = codeInput.value.trim();
      if (!code) {
        new import_obsidian2.Notice("\u8BF7\u8F93\u5165\u6388\u6743\u7801");
        return;
      }
      if (code.length < 10) {
        new import_obsidian2.Notice("\u6388\u6743\u7801\u683C\u5F0F\u4E0D\u6B63\u786E\uFF0C\u8BF7\u68C0\u67E5\u540E\u91CD\u8BD5");
        return;
      }
      this.onComplete(code);
      this.close();
    });
    const cancelButton = buttonContainer.createEl("button", {
      text: "\u53D6\u6D88"
    });
    cancelButton.addEventListener("click", () => {
      this.close();
    });
    setTimeout(() => {
      codeInput.focus();
    }, 100);
    codeInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        completeButton.click();
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/settings.ts
var FeishuShareSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "\u98DE\u4E66\u5206\u4EAB\u8BBE\u7F6E" });
    containerEl.createEl("p", {
      text: "\u914D\u7F6E\u98DE\u4E66\u8D26\u53F7\u6388\u6743\u548C\u9ED8\u8BA4\u4E0A\u4F20\u8BBE\u7F6E\uFF0C\u5B9E\u73B0\u4E00\u952E\u5206\u4EAB Markdown \u5185\u5BB9\u5230\u98DE\u4E66\u4E91\u6587\u6863\u3002"
    });
    this.addAppConfigSection(containerEl);
    this.addAppCredentialsSection(containerEl);
    this.addProxySection(containerEl);
    this.addAuthSection(containerEl);
    this.addFolderSection(containerEl);
    this.addUsageSection(containerEl);
  }
  /**
   * 添加应用配置说明部分
   */
  addAppConfigSection(containerEl) {
    containerEl.createEl("h3", { text: "\u{1F4CB} \u4F7F\u7528\u524D\u51C6\u5907" });
    const configDiv = containerEl.createDiv("setting-item-description");
    configDiv.innerHTML = `
			<p><strong>\u9996\u6B21\u4F7F\u7528\u9700\u8981\u521B\u5EFA\u98DE\u4E66\u5E94\u7528\uFF1A</strong></p>
			<ol>
				<li>\u8BBF\u95EE <a href="https://open.feishu.cn/app" target="_blank">\u98DE\u4E66\u5F00\u653E\u5E73\u53F0</a></li>
				<li>\u521B\u5EFA\u4F01\u4E1A\u81EA\u5EFA\u5E94\u7528\u6216\u4E2A\u4EBA\u5E94\u7528</li>
				<li>\u5728\u5E94\u7528\u7BA1\u7406\u9875\u9762\u83B7\u53D6 App ID \u548C App Secret</li>
				<li>\u914D\u7F6E\u91CD\u5B9A\u5411 URL\uFF1A<code>https://httpbin.org/get</code></li>
				<li>\u7533\u8BF7\u4EE5\u4E0B\u6743\u9650\uFF1A
					<ul>
						<li>contact:user.base:readonly (\u8BFB\u53D6\u7528\u6237\u57FA\u672C\u4FE1\u606F)</li>
						<li>docx:document (\u521B\u5EFA\u548C\u7BA1\u7406\u6587\u6863)</li>
						<li>drive:drive (\u8BBF\u95EE\u4E91\u6587\u6863)</li>
					</ul>
				</li>
			</ol>
			<p><em>\u6CE8\u610F\uFF1A\u7531\u4E8E\u6280\u672F\u9650\u5236\uFF0C\u5F53\u524D\u7248\u672C\u9700\u8981\u60A8\u624B\u52A8\u914D\u7F6E\u5E94\u7528\u4FE1\u606F\u3002\u672A\u6765\u7248\u672C\u5C06\u7B80\u5316\u6B64\u6D41\u7A0B\u3002</em></p>
		`;
  }
  /**
   * 添加应用凭据配置部分
   */
  addAppCredentialsSection(containerEl) {
    containerEl.createEl("h3", { text: "\u{1F511} \u5E94\u7528\u914D\u7F6E" });
    new import_obsidian3.Setting(containerEl).setName("App ID").setDesc("\u5728\u98DE\u4E66\u5F00\u653E\u5E73\u53F0\u521B\u5EFA\u5E94\u7528\u540E\u83B7\u5F97\u7684 App ID").addText((text) => text.setPlaceholder("\u8BF7\u8F93\u5165 App ID").setValue(this.plugin.settings.appId).onChange(async (value) => {
      this.plugin.settings.appId = value.trim();
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("App Secret").setDesc("\u5728\u98DE\u4E66\u5F00\u653E\u5E73\u53F0\u521B\u5EFA\u5E94\u7528\u540E\u83B7\u5F97\u7684 App Secret\uFF08\u8BF7\u59A5\u5584\u4FDD\u7BA1\uFF09").addText((text) => {
      text.inputEl.type = "password";
      text.setPlaceholder("\u8BF7\u8F93\u5165 App Secret").setValue(this.plugin.settings.appSecret).onChange(async (value) => {
        this.plugin.settings.appSecret = value.trim();
        await this.plugin.saveSettings();
      });
    });
    const statusDiv = containerEl.createDiv("setting-item-description");
    if (this.plugin.settings.appId && this.plugin.settings.appSecret) {
      statusDiv.innerHTML = '<span style="color: var(--text-success);">\u2705 \u5E94\u7528\u914D\u7F6E\u5DF2\u5B8C\u6210</span>';
    } else {
      statusDiv.innerHTML = '<span style="color: var(--text-error);">\u26A0\uFE0F \u8BF7\u5B8C\u6210\u5E94\u7528\u914D\u7F6E\u540E\u518D\u8FDB\u884C\u6388\u6743</span>';
    }
  }
  /**
   * 添加代理服务器设置部分
   */
  addProxySection(containerEl) {
    containerEl.createEl("h3", { text: "\u{1F310} \u4EE3\u7406\u670D\u52A1\u5668\u8BBE\u7F6E" });
    let currentProxyType = this.getProxyType();
    new import_obsidian3.Setting(containerEl).setName("\u4EE3\u7406\u670D\u52A1\u5668\u7C7B\u578B").setDesc("\u9009\u62E9\u4EE3\u7406\u670D\u52A1\u5668\u7C7B\u578B\uFF1A\u4E91\u7AEF\u6258\u7BA1\uFF08\u63A8\u8350\uFF09\u6216\u672C\u5730\u670D\u52A1\u5668").addDropdown((dropdown) => dropdown.addOption("cloud", "\u2601\uFE0F \u4E91\u7AEF\u6258\u7BA1 (\u63A8\u8350\uFF0C\u96F6\u914D\u7F6E)").addOption("local", "\u{1F3E0} \u672C\u5730\u670D\u52A1\u5668 (\u9700\u8981\u8FD0\u884CPython\u811A\u672C)").addOption("custom", "\u{1F527} \u81EA\u5B9A\u4E49\u5730\u5740").setValue(currentProxyType).onChange(async (value) => {
      this.plugin.settings.proxyType = value;
      if (value === "local") {
        this.plugin.settings.proxyUrl = "http://localhost:5000";
      } else if (value === "cloud") {
        this.plugin.settings.proxyUrl = "https://md2feishu.xinqi.life";
      }
      await this.plugin.saveSettings();
      this.display();
    }));
    if (currentProxyType === "custom") {
      const customUrlSetting = new import_obsidian3.Setting(containerEl).setName("\u81EA\u5B9A\u4E49\u4EE3\u7406\u5730\u5740").setDesc("\u8F93\u5165\u60A8\u7684\u81EA\u5B9A\u4E49\u4EE3\u7406\u670D\u52A1\u5668\u5730\u5740");
      let tempUrl = this.plugin.settings.proxyUrl || "";
      customUrlSetting.addText((text) => text.setPlaceholder("https://your-proxy.vercel.app").setValue(tempUrl).onChange((value) => {
        tempUrl = value;
      })).addButton((button) => button.setButtonText("\u4FDD\u5B58").setCta().onClick(async () => {
        this.plugin.settings.proxyUrl = tempUrl;
        await this.plugin.saveSettings();
        new import_obsidian3.Notice("\u81EA\u5B9A\u4E49\u4EE3\u7406\u5730\u5740\u5DF2\u4FDD\u5B58");
        this.display();
      }));
    }
    const currentProxyDiv = containerEl.createDiv("setting-item-description");
    const currentUrl = this.plugin.settings.proxyUrl || "https://md2feishu.xinqi.life";
    currentProxyDiv.innerHTML = `<span style="color: var(--text-muted);">\u5F53\u524D\u4EE3\u7406\u5730\u5740: ${currentUrl}</span>`;
  }
  /**
   * 获取代理服务器类型
   */
  getProxyType() {
    if (this.plugin.settings.proxyType) {
      return this.plugin.settings.proxyType;
    }
    const url = this.plugin.settings.proxyUrl || "https://md2feishu.xinqi.life";
    if (url === "http://localhost:5000") {
      return "local";
    } else if (url === "https://md2feishu.xinqi.life") {
      return "cloud";
    } else {
      return "custom";
    }
  }
  /**
   * 添加授权管理部分
   */
  addAuthSection(containerEl) {
    containerEl.createEl("h3", { text: "\u{1F510} \u98DE\u4E66\u8D26\u53F7\u6388\u6743" });
    const statusDiv = containerEl.createDiv("setting-item");
    const statusInfo = statusDiv.createDiv("setting-item-info");
    statusInfo.createDiv("setting-item-name").setText("\u6388\u6743\u72B6\u6001");
    const statusDesc = statusInfo.createDiv("setting-item-description");
    this.updateAuthStatus(statusDesc);
    const authControl = statusDiv.createDiv("setting-item-control");
    const authButton = authControl.createEl("button", {
      text: this.plugin.settings.accessToken ? "\u91CD\u65B0\u6388\u6743" : "\u5F00\u59CB\u6388\u6743",
      cls: "mod-cta"
    });
    const canAuth = this.plugin.settings.appId && this.plugin.settings.appSecret;
    if (!canAuth) {
      authButton.disabled = true;
      authButton.title = "\u8BF7\u5148\u914D\u7F6E App ID \u548C App Secret";
    }
    authButton.addEventListener("click", () => {
      if (canAuth) {
        this.startAutoAuth();
      }
    });
    if (canAuth && !this.plugin.settings.accessToken) {
      const manualButton = authControl.createEl("button", {
        text: "\u624B\u52A8\u8F93\u5165\u6388\u6743\u7801"
      });
      manualButton.addEventListener("click", () => {
        this.startManualAuth();
      });
    }
    if (this.plugin.settings.accessToken) {
      const clearButton = authControl.createEl("button", {
        text: "\u89E3\u9664\u6388\u6743",
        cls: "mod-warning"
      });
      clearButton.addEventListener("click", () => {
        this.clearAuth();
      });
    }
  }
  /**
   * 添加文件夹设置部分
   */
  addFolderSection(containerEl) {
    if (!this.plugin.settings.accessToken) {
      return;
    }
    containerEl.createEl("h3", { text: "\u{1F4C1} \u9ED8\u8BA4\u4E0A\u4F20\u4F4D\u7F6E" });
    const folderDiv = containerEl.createDiv("setting-item");
    const folderInfo = folderDiv.createDiv("setting-item-info");
    folderInfo.createDiv("setting-item-name").setText("\u9ED8\u8BA4\u6587\u4EF6\u5939");
    const folderDesc = folderInfo.createDiv("setting-item-description");
    folderDesc.setText(
      this.plugin.settings.defaultFolderName || "\u6211\u7684\u7A7A\u95F4\uFF08\u6839\u76EE\u5F55\uFF09"
    );
    const folderControl = folderDiv.createDiv("setting-item-control");
    const selectButton = folderControl.createEl("button", {
      text: "\u9009\u62E9\u6587\u4EF6\u5939"
    });
    selectButton.addEventListener("click", () => {
      this.selectFolder();
    });
    if (this.plugin.settings.defaultFolderId) {
      const resetButton = folderControl.createEl("button", {
        text: "\u91CD\u7F6E\u4E3A\u9ED8\u8BA4"
      });
      resetButton.addEventListener("click", () => {
        this.resetFolder();
      });
    }
  }
  /**
   * 添加使用说明部分
   */
  addUsageSection(containerEl) {
    containerEl.createEl("h3", { text: "\u{1F4D6} \u4F7F\u7528\u8BF4\u660E" });
    const usageDiv = containerEl.createDiv("setting-item-description");
    usageDiv.innerHTML = `
			<p><strong>\u5206\u4EAB\u65B9\u5F0F\uFF1A</strong></p>
			<ul>
				<li>\u5728 Markdown \u6587\u4EF6\u4E2D\uFF0C\u70B9\u51FB\u53F3\u4E0A\u89D2\u83DC\u5355\u4E2D\u7684"\u5206\u4EAB\u5230\u98DE\u4E66"</li>
				<li>\u53F3\u952E\u70B9\u51FB\u6587\u4EF6\uFF0C\u9009\u62E9"\u5206\u4EAB\u5230\u98DE\u4E66"</li>
				<li>\u4F7F\u7528\u547D\u4EE4\u9762\u677F\u641C\u7D22"\u5206\u4EAB\u5230\u98DE\u4E66"</li>
			</ul>
			<p><strong>\u652F\u6301\u7684\u5185\u5BB9\uFF1A</strong></p>
			<ul>
				<li>\u2705 \u6807\u51C6 Markdown \u683C\u5F0F\uFF08\u6807\u9898\u3001\u5217\u8868\u3001\u7C97\u4F53\u3001\u659C\u4F53\u7B49\uFF09</li>
				<li>\u2705 \u7F51\u7EDC\u56FE\u7247\u94FE\u63A5\uFF08http/https\uFF09</li>
				<li>\u26A0\uFE0F Obsidian \u7279\u6709\u8BED\u6CD5\u4F1A\u8F6C\u6362\u4E3A\u666E\u901A\u6587\u672C</li>
				<li>\u274C \u672C\u5730\u56FE\u7247\u9700\u8981\u624B\u52A8\u4E0A\u4F20\u5230\u98DE\u4E66</li>
			</ul>
		`;
  }
  /**
   * 更新授权状态显示
   */
  updateAuthStatus(element) {
    if (this.plugin.settings.accessToken && this.plugin.settings.userInfo) {
      element.innerHTML = `
				<span style="color: var(--text-success);">\u2705 \u5DF2\u6388\u6743</span><br>
				<small>\u8D26\u6237\uFF1A${this.plugin.settings.userInfo.name}</small>
			`;
    } else {
      element.innerHTML = '<span style="color: var(--text-error);">\u274C \u672A\u6388\u6743</span>';
    }
  }
  /**
   * 开始自动授权流程
   */
  async startAutoAuth() {
    try {
      new import_obsidian3.Notice("\u{1F680} \u542F\u52A8\u81EA\u52A8\u6388\u6743\u6D41\u7A0B...");
      if (this.plugin.feishuApi.hasValidToken()) {
        new import_obsidian3.Notice("\u2705 \u68C0\u6D4B\u5230\u6709\u6548\u7684\u6388\u6743token\uFF0C\u65E0\u9700\u91CD\u65B0\u6388\u6743");
        return;
      }
      const success = await this.plugin.feishuApi.startAutoOAuth();
      if (success) {
        await this.plugin.saveSettings();
        new import_obsidian3.Notice(MESSAGES.SUCCESS.AUTH_SUCCESS);
        this.display();
      } else {
        new import_obsidian3.Notice(MESSAGES.ERROR.AUTH_FAILED);
      }
    } catch (error) {
      console.error("Auto auth error:", error);
      new import_obsidian3.Notice("\u26A0\uFE0F \u81EA\u52A8\u6388\u6743\u5931\u8D25\uFF0C\u5207\u6362\u5230\u624B\u52A8\u6388\u6743\u6A21\u5F0F...");
      this.startManualAuth();
    }
  }
  /**
   * 开始手动授权流程（备用方案）
   */
  async startManualAuth() {
    try {
      const authUrl = this.plugin.feishuApi.generateAuthUrl();
      const modal = new ManualAuthModal(
        this.app,
        authUrl,
        async (code) => {
          try {
            new import_obsidian3.Notice(MESSAGES.INFO.AUTHORIZING);
            const success = await this.plugin.feishuApi.handleOAuthCallback(code);
            if (success) {
              await this.plugin.saveSettings();
              new import_obsidian3.Notice(MESSAGES.SUCCESS.AUTH_SUCCESS);
              this.display();
            } else {
              new import_obsidian3.Notice(MESSAGES.ERROR.AUTH_FAILED);
            }
          } catch (error) {
            console.error("Auth callback error:", error);
            new import_obsidian3.Notice(`${MESSAGES.ERROR.AUTH_FAILED}\uFF1A${error.message}`);
          }
        }
      );
      modal.open();
    } catch (error) {
      console.error("Start manual auth error:", error);
      new import_obsidian3.Notice(`${MESSAGES.ERROR.AUTH_FAILED}\uFF1A${error.message}`);
    }
  }
  /**
   * 清除授权信息
   */
  async clearAuth() {
    this.plugin.feishuApi.clearAuth();
    await this.plugin.saveSettings();
    new import_obsidian3.Notice("\u5DF2\u89E3\u9664\u98DE\u4E66\u6388\u6743");
    this.display();
  }
  /**
   * 选择文件夹
   */
  async selectFolder() {
    try {
      this.showFolderSelectModal();
    } catch (error) {
      console.error("Select folder error:", error);
      new import_obsidian3.Notice(`\u6253\u5F00\u6587\u4EF6\u5939\u9009\u62E9\u5931\u8D25\uFF1A${error.message}`);
    }
  }
  /**
   * 显示文件夹选择模态框
   */
  showFolderSelectModal() {
    const modal = new FolderSelectModal(
      this.app,
      this.plugin.feishuApi,
      async (selectedFolder) => {
        if (selectedFolder) {
          this.plugin.settings.defaultFolderId = selectedFolder.folder_token;
          this.plugin.settings.defaultFolderName = selectedFolder.name;
        } else {
          this.plugin.settings.defaultFolderId = "";
          this.plugin.settings.defaultFolderName = "\u6211\u7684\u7A7A\u95F4";
        }
        await this.plugin.saveSettings();
        new import_obsidian3.Notice("\u9ED8\u8BA4\u6587\u4EF6\u5939\u8BBE\u7F6E\u5DF2\u4FDD\u5B58");
        this.display();
      }
    );
    modal.open();
  }
  /**
   * 重置文件夹设置
   */
  async resetFolder() {
    this.plugin.settings.defaultFolderId = "";
    this.plugin.settings.defaultFolderName = "\u6211\u7684\u7A7A\u95F4";
    await this.plugin.saveSettings();
    new import_obsidian3.Notice("\u5DF2\u91CD\u7F6E\u4E3A\u9ED8\u8BA4\u6587\u4EF6\u5939");
    this.display();
  }
};

// src/types.ts
var FEISHU_ERROR_MESSAGES = {
  1: "\u7CFB\u7EDF\u9519\u8BEF",
  2: "\u53C2\u6570\u9519\u8BEF",
  3: "\u6743\u9650\u4E0D\u8DB3",
  4: "\u8D44\u6E90\u4E0D\u5B58\u5728",
  5: "\u8BF7\u6C42\u9891\u7387\u8FC7\u9AD8",
  99991663: "access_token \u65E0\u6548\u6216\u5DF2\u8FC7\u671F",
  99991664: "refresh_token \u65E0\u6548\u6216\u5DF2\u8FC7\u671F",
  99991665: "\u5E94\u7528\u6743\u9650\u4E0D\u8DB3",
  99991666: "\u7528\u6237\u6743\u9650\u4E0D\u8DB3",
  230001: "\u6587\u6863\u6807\u9898\u4E0D\u80FD\u4E3A\u7A7A",
  230002: "\u6587\u6863\u6807\u9898\u8FC7\u957F",
  230003: "\u6587\u6863\u5185\u5BB9\u8FC7\u5927",
  230004: "\u6587\u4EF6\u5939\u4E0D\u5B58\u5728\u6216\u65E0\u6743\u9650\u8BBF\u95EE"
};

// src/feishu-api.ts
var FeishuApiService = class {
  constructor(settings) {
    this.settings = settings;
  }
  /**
   * 更新设置
   */
  updateSettings(settings) {
    this.settings = settings;
  }
  /**
   * 生成授权 URL
   */
  generateAuthUrl() {
    if (!this.settings.appId || !this.settings.appSecret) {
      throw new Error("\u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6E\u98DE\u4E66\u5E94\u7528\u7684 App ID \u548C App Secret");
    }
    const state = this.generateRandomState();
    localStorage.setItem("feishu-oauth-state", state);
    const params = new URLSearchParams({
      app_id: this.settings.appId,
      redirect_uri: FEISHU_CONFIG.REDIRECT_URI,
      scope: FEISHU_CONFIG.SCOPES,
      state,
      response_type: "code"
    });
    const authUrl = `${FEISHU_CONFIG.AUTHORIZE_URL}?${params.toString()}`;
    console.log("Generated auth URL:", authUrl);
    return authUrl;
  }
  /**
   * 启动简化OAuth流程（打开授权页面，用户手动复制授权码）
   */
  async startAutoOAuth() {
    try {
      console.log("Starting OAuth flow via proxy server...");
      if (!this.settings.appId || !this.settings.appSecret) {
        throw new Error("\u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6E\u98DE\u4E66\u5E94\u7528\u7684 App ID \u548C App Secret");
      }
      const state = this.generateRandomState();
      localStorage.setItem("feishu-oauth-state", state);
      const proxyUrl = this.settings.proxyUrl || "https://md2feishu.xinqi.life";
      console.log(`Using proxy URL: ${proxyUrl}`);
      const startResponse = await fetch(`${proxyUrl}/oauth/start`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          app_id: this.settings.appId,
          state
        })
      });
      console.log(`Start response status: ${startResponse.status}`);
      const startResult = await startResponse.json();
      console.log("Start result:", startResult);
      if (!startResult.success) {
        throw new Error(startResult.error || "Failed to start OAuth flow");
      }
      console.log("OAuth flow started, opening authorization URL...");
      console.log("Python server will handle OAuth flow automatically");
      const maxAttempts = 60;
      const pollInterval = 1e3;
      console.log(`Starting OAuth status polling for state: ${state}`);
      for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        await new Promise((resolve) => setTimeout(resolve, pollInterval));
        try {
          const statusUrl = `${proxyUrl}/oauth/status/${state}`;
          console.log(`Polling status URL: ${statusUrl}`);
          const statusResponse = await fetch(statusUrl);
          console.log(`Status response status: ${statusResponse.status}`);
          if (!statusResponse.ok) {
            console.warn(`OAuth status check failed with status: ${statusResponse.status}`);
            continue;
          }
          const statusResult = await statusResponse.json();
          console.log(`OAuth status check ${attempt}:`, JSON.stringify(statusResult, null, 2));
          if (statusResult.success && statusResult.code) {
            console.log("OAuth authorization completed, exchanging code for token...");
            const success = await this.handleOAuthCallback(statusResult.code);
            return success;
          } else if (statusResult.error && !statusResult.pending) {
            console.error(`OAuth error: ${statusResult.error}`);
            throw new Error(statusResult.error);
          }
          console.log(`Waiting for OAuth authorization... (${attempt}/${maxAttempts})`);
          if (statusResult.pending) {
            console.log(`Status: ${statusResult.message || "Pending"}`);
          }
        } catch (pollError) {
          console.warn(`OAuth status check failed (attempt ${attempt}):`, pollError);
        }
      }
      throw new Error("OAuth authorization timeout");
    } catch (error) {
      console.error("OAuth error:", error);
      throw error;
    }
  }
  /**
   * 处理 OAuth 回调
   */
  async handleOAuthCallback(code, state) {
    try {
      console.log("=== OAuth Callback Debug Info ===");
      console.log("Code received:", code);
      console.log("Code length:", code.length);
      console.log("State received:", state);
      console.log("App ID:", this.settings.appId);
      console.log("App Secret length:", this.settings.appSecret ? this.settings.appSecret.length : "not set");
      if (!code || code.length < 10) {
        throw new Error("\u6388\u6743\u7801\u683C\u5F0F\u4E0D\u6B63\u786E\uFF0C\u8BF7\u68C0\u67E5\u662F\u5426\u5B8C\u6574\u590D\u5236");
      }
      const savedState = localStorage.getItem("feishu-oauth-state");
      console.log("Saved state:", savedState);
      if (state && savedState && state !== savedState) {
        console.warn("State validation failed:", { provided: state, saved: savedState });
      }
      localStorage.removeItem("feishu-oauth-state");
      console.log("Exchanging code for token...");
      const tokenResponse = await this.exchangeCodeForToken(code);
      console.log("Token exchange successful, access_token length:", tokenResponse.access_token.length);
      this.settings.accessToken = tokenResponse.access_token;
      this.settings.refreshToken = tokenResponse.refresh_token;
      console.log("Extracting user info from token response...");
      const userInfo = {
        userId: tokenResponse.open_id,
        name: tokenResponse.name,
        avatar: tokenResponse.avatar_url
      };
      this.settings.userInfo = userInfo;
      console.log("User info extracted:", userInfo.name);
      console.log("=== OAuth Callback Success ===");
      return true;
    } catch (error) {
      console.error("=== OAuth Callback Error ===");
      console.error("Error details:", error);
      console.error("Error message:", error.message);
      console.error("Error stack:", error.stack);
      if (error.message) {
        throw new Error(error.message);
      } else {
        throw new Error("\u6388\u6743\u5904\u7406\u5931\u8D25\uFF0C\u8BF7\u91CD\u8BD5");
      }
    }
  }
  /**
   * 使用授权码换取访问令牌
   */
  async exchangeCodeForToken(code) {
    var _a, _b;
    console.log("=== Debug Settings ===");
    console.log("App ID raw:", JSON.stringify(this.settings.appId));
    console.log("App ID length:", this.settings.appId ? this.settings.appId.length : 0);
    console.log("App Secret length:", this.settings.appSecret ? this.settings.appSecret.length : 0);
    console.log("App Secret first 4 chars:", this.settings.appSecret ? this.settings.appSecret.substring(0, 4) : "N/A");
    console.log("App Secret last 4 chars:", this.settings.appSecret ? this.settings.appSecret.substring(-4) : "N/A");
    const requestBody = {
      grant_type: "authorization_code",
      app_id: (_a = this.settings.appId) == null ? void 0 : _a.trim(),
      // 使用 app_id 而不是 client_id
      app_secret: (_b = this.settings.appSecret) == null ? void 0 : _b.trim(),
      // 使用 app_secret 而不是 client_secret
      code: code.trim(),
      redirect_uri: FEISHU_CONFIG.REDIRECT_URI
    };
    console.log("=== Debug Request Body ===");
    console.log("Final app_id:", JSON.stringify(requestBody.app_id));
    console.log("Final app_secret length:", requestBody.app_secret ? requestBody.app_secret.length : 0);
    console.log("Token exchange request:", {
      url: FEISHU_CONFIG.TOKEN_URL,
      body: {
        ...requestBody,
        app_secret: requestBody.app_secret ? `[${requestBody.app_secret.length} chars]` : "[MISSING]"
      }
      // 显示长度而不是内容
    });
    const proxyRequest = {
      url: FEISHU_CONFIG.TOKEN_URL,
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      data: requestBody
    };
    const proxyUrl = this.settings.proxyUrl || "https://md2feishu.xinqi.life";
    const response = await fetch(`${proxyUrl}/proxy`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(proxyRequest)
    });
    const data = await response.json();
    console.log("Token exchange response:", {
      status: response.status,
      ok: response.ok,
      code: data.code,
      msg: data.msg
    });
    if (!response.ok || data.code !== 0) {
      const errorMsg = this.getErrorMessage(data);
      console.error("Token exchange failed:", errorMsg);
      throw new Error(errorMsg);
    }
    return data.data;
  }
  /**
   * 刷新访问令牌
   */
  async refreshAccessToken() {
    try {
      if (!this.settings.refreshToken) {
        return false;
      }
      const response = await fetch(FEISHU_CONFIG.REFRESH_TOKEN_URL, {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify({
          grant_type: "refresh_token",
          refresh_token: this.settings.refreshToken
        })
      });
      const data = await response.json();
      if (!response.ok || data.code !== 0) {
        return false;
      }
      this.settings.accessToken = data.data.access_token;
      this.settings.refreshToken = data.data.refresh_token;
      return true;
    } catch (error) {
      console.error("Refresh token error:", error);
      return false;
    }
  }
  /**
   * 获取用户信息
   */
  async getUserInfo() {
    const response = await this.makeAuthenticatedRequest("/authen/v1/user_info");
    return {
      userId: response.data.user_id,
      name: response.data.name,
      avatar: response.data.avatar_url
    };
  }
  /**
   * 创建飞书文档 - 使用文件导入方式
   */
  async createDocument(title, content, folderId) {
    try {
      if (title.length > 100) {
        title = title.substring(0, 97) + "...";
      }
      console.log("Creating document via file import...");
      console.log("Title:", title);
      console.log("Content length:", content.length);
      console.log("Folder ID:", folderId);
      return await this.importMarkdownAsDocument(title, content, folderId);
    } catch (error) {
      console.error("Create document error:", error);
      return {
        success: false,
        error: error.message,
        errorCode: error.code
      };
    }
  }
  /**
   * 通过上传 Markdown 文件创建飞书文档（容错策略）
   */
  async importMarkdownAsDocument(title, content, folderId) {
    try {
      console.log("=== Starting Upload Process with Fallback Strategy ===");
      console.log("Step 1: Uploading markdown file...");
      const uploadResult = await this.uploadMarkdownFile(title, content);
      if (!uploadResult.success || !uploadResult.fileToken) {
        throw new Error(`File upload failed: ${uploadResult.error}`);
      }
      console.log("File uploaded successfully, token:", uploadResult.fileToken);
      const fallbackFileUrl = `https://feishu.cn/file/${uploadResult.fileToken}`;
      console.log("Step 2: Attempting import task with 15s timeout...");
      try {
        const cleanTitle = title.endsWith(".md") ? title.slice(0, -3) : title;
        const importResult = await this.createImportTaskWithCorrectFolder(uploadResult.fileToken, cleanTitle);
        if (importResult.success && importResult.ticket) {
          console.log("Import task created, ticket:", importResult.ticket);
          console.log("Step 3: Waiting for import completion (15s timeout)...");
          const finalResult = await this.waitForImportCompletionWithTimeout(importResult.ticket, 15e3);
          if (finalResult.success && finalResult.documentToken) {
            const docUrl = `https://feishu.cn/docx/${finalResult.documentToken}`;
            console.log("=== Import Process Completed Successfully ===");
            console.log("Document URL:", docUrl);
            console.log("Step 4: Deleting source file after successful conversion...");
            try {
              await this.deleteSourceFile(uploadResult.fileToken);
              console.log("\u2705 Source file deleted successfully");
            } catch (deleteError) {
              console.warn("\u26A0\uFE0F Failed to delete source file:", deleteError.message);
            }
            return {
              success: true,
              docUrl,
              docTitle: title
            };
          } else {
            console.warn("Import failed or timed out, using fallback file URL");
            console.log("=== Using Fallback Strategy ===");
            console.log("Keeping source file and returning file URL:", fallbackFileUrl);
            return {
              success: true,
              docUrl: fallbackFileUrl,
              docTitle: title,
              warning: "\u8F6C\u6362\u8D85\u65F6\uFF0C\u5DF2\u4FDD\u7559\u6E90\u6587\u4EF6\u3002\u53EF\u7A0D\u540E\u624B\u52A8\u8F6C\u6362\u4E3A\u5728\u7EBF\u6587\u6863\u683C\u5F0F"
            };
          }
        }
      } catch (importError) {
        console.warn("Import task failed, using fallback strategy:", importError.message);
      }
      console.log("=== Fallback to File Link (Import Task Failed) ===");
      console.log("Keeping source file and returning file URL:", fallbackFileUrl);
      return {
        success: true,
        docUrl: fallbackFileUrl,
        docTitle: title,
        warning: "\u5BFC\u5165\u4EFB\u52A1\u521B\u5EFA\u5931\u8D25\uFF0C\u5DF2\u4FDD\u7559\u6E90\u6587\u4EF6\u3002\u53EF\u7A0D\u540E\u624B\u52A8\u8F6C\u6362\u4E3A\u5728\u7EBF\u6587\u6863\u683C\u5F0F"
      };
    } catch (error) {
      console.error("=== Upload Process Failed ===");
      console.error("Error:", error.message);
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * 获取文件夹列表
   */
  async getFolderList(parentFolderId) {
    try {
      console.log("Getting folder list, parent folder ID:", parentFolderId);
      const params = new URLSearchParams();
      if (parentFolderId) {
        params.append("parent_folder_token", parentFolderId);
      }
      params.append("page_size", "50");
      const url = `/drive/v1/files${params.toString() ? "?" + params.toString() : ""}`;
      console.log("Folder list API URL:", url);
      const response = await this.makeAuthenticatedRequest(url);
      console.log("Folder list response:", JSON.stringify(response, null, 2));
      if (response.data && response.data.files) {
        const folders = response.data.files.filter((file) => file.type === "folder");
        return {
          ...response,
          data: {
            ...response.data,
            folders
          }
        };
      }
      return response;
    } catch (error) {
      console.error("Get folder list error:", error);
      throw error;
    }
  }
  /**
   * 发起认证请求
   */
  async makeAuthenticatedRequest(endpoint, options = {}) {
    const url = `${FEISHU_CONFIG.API_BASE_URL}${endpoint}`;
    const headers = {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${this.settings.accessToken}`,
      ...options.headers
    };
    const proxyRequest = {
      url,
      method: options.method || "GET",
      headers,
      data: options.body ? JSON.parse(options.body) : void 0
    };
    console.log("=== makeAuthenticatedRequest Debug ===");
    console.log("Endpoint:", endpoint);
    console.log("Full URL:", url);
    console.log("Method:", options.method || "GET");
    console.log("Has body:", !!options.body);
    console.log("Access token length:", this.settings.accessToken ? this.settings.accessToken.length : 0);
    const proxyUrl = this.settings.proxyUrl || "https://md2feishu.xinqi.life";
    let response = await fetch(`${proxyUrl}/proxy`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(proxyRequest)
    });
    let data = await response.json();
    if (data.code === 99991663 && this.settings.refreshToken) {
      const refreshed = await this.refreshAccessToken();
      if (refreshed) {
        proxyRequest.headers["Authorization"] = `Bearer ${this.settings.accessToken}`;
        response = await fetch(`${proxyUrl}/proxy`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(proxyRequest)
        });
        data = await response.json();
      }
    }
    if (!response.ok || data.code !== 0) {
      const error = new Error(this.getErrorMessage(data));
      error.code = data.code;
      throw error;
    }
    return data;
  }
  /**
   * 发起文件上传请求
   */
  async makeAuthenticatedFileUpload(endpoint, uploadData) {
    const url = `${FEISHU_CONFIG.API_BASE_URL}${endpoint}`;
    const headers = {
      "Authorization": `Bearer ${this.settings.accessToken}`
    };
    const proxyRequest = {
      url,
      method: "POST",
      headers,
      data: uploadData
      // 移除isFileUpload标记，代理服务器会自动检测
    };
    console.log("=== makeAuthenticatedFileUpload Debug ===");
    console.log("Endpoint:", endpoint);
    console.log("Full URL:", url);
    console.log("File name:", uploadData.file_name);
    console.log("Content length:", uploadData.file_content ? uploadData.file_content.length : 0);
    console.log("Access token length:", this.settings.accessToken ? this.settings.accessToken.length : 0);
    const proxyUrl = this.settings.proxyUrl || "https://md2feishu.xinqi.life";
    let response = await fetch(`${proxyUrl}/proxy`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(proxyRequest)
    });
    let data = await response.json();
    if (data.code === 99991663 && this.settings.refreshToken) {
      const refreshed = await this.refreshAccessToken();
      if (refreshed) {
        proxyRequest.headers["Authorization"] = `Bearer ${this.settings.accessToken}`;
        response = await fetch(`${proxyUrl}/proxy`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(proxyRequest)
        });
        data = await response.json();
      }
    }
    if (!response.ok || data.code !== 0) {
      console.error("File upload API error:");
      console.error("Response status:", response.status);
      console.error("Response ok:", response.ok);
      console.error("Data:", JSON.stringify(data, null, 2));
      let errorMessage = "File upload failed";
      if (data && typeof data === "object") {
        if (data.code !== void 0 && data.msg) {
          errorMessage = this.getErrorMessage(data);
        } else if (data.error) {
          errorMessage = data.error;
        } else if (data.message) {
          errorMessage = data.message;
        }
      }
      const error = new Error(errorMessage);
      error.code = data == null ? void 0 : data.code;
      throw error;
    }
    return data;
  }
  /**
   * 获取错误信息
   */
  getErrorMessage(errorData) {
    const { code, msg } = errorData;
    const chineseMessage = FEISHU_ERROR_MESSAGES[code];
    if (chineseMessage) {
      return `${chineseMessage} (\u9519\u8BEF\u7801: ${code})`;
    }
    return `${msg} (\u9519\u8BEF\u7801: ${code})`;
  }
  /**
   * 检查是否有有效的token
   */
  hasValidToken() {
    return !!(this.settings.accessToken && this.settings.accessToken.trim());
  }
  /**
   * 生成随机状态值
   */
  generateRandomState() {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
  }
  /**
   * 检查授权状态
   */
  isAuthorized() {
    return !!this.settings.accessToken;
  }
  /**
   * 清除授权信息
   */
  clearAuth() {
    this.settings.accessToken = "";
    this.settings.refreshToken = "";
    this.settings.userInfo = null;
    this.settings.defaultFolderId = "";
    this.settings.defaultFolderName = "\u6211\u7684\u7A7A\u95F4";
  }
  /**
   * 上传 Markdown 文件到飞书 - 通过代理服务器
   */
  async uploadMarkdownFile(title, content) {
    try {
      console.log("Uploading markdown file via proxy...");
      const fileName = title.endsWith(".md") ? title : `${title}.md`;
      const utf8Bytes = new TextEncoder().encode(content);
      const base64Content = btoa(utf8Bytes.reduce((data, byte) => data + String.fromCharCode(byte), ""));
      const uploadData = {
        file_name: fileName,
        file_content: base64Content,
        parent_type: "explorer",
        // 与Python脚本一致
        size: utf8Bytes.length.toString()
        // UTF-8字节长度（与Python脚本解码后的长度一致）
      };
      if (this.settings.defaultFolderId) {
        uploadData.parent_node = this.settings.defaultFolderId;
        console.log("Uploading to folder:", this.settings.defaultFolderId);
      }
      console.log("Using Python script compatible parameters:", {
        file_name: fileName,
        parent_type: uploadData.parent_type,
        size: uploadData.size,
        utf8_bytes_size: utf8Bytes.length,
        has_parent_node: !!uploadData.parent_node
      });
      console.log("Uploading file:", fileName, "Size:", content.length);
      const response = await this.makeAuthenticatedFileUpload("/drive/v1/files/upload_all", uploadData);
      console.log("Upload response:", JSON.stringify(response, null, 2));
      if (response.data && response.data.file_token) {
        return {
          success: true,
          fileToken: response.data.file_token
        };
      } else {
        throw new Error(`Upload failed: ${response.msg || "Unknown error"}`);
      }
    } catch (error) {
      console.error("Upload markdown file error:", error);
      console.error("Error type:", typeof error);
      console.error("Error message:", error == null ? void 0 : error.message);
      console.error("Error stack:", error == null ? void 0 : error.stack);
      const errorMessage = (error == null ? void 0 : error.message) || (error == null ? void 0 : error.toString()) || "Unknown upload error";
      return {
        success: false,
        error: errorMessage
      };
    }
  }
  /**
   * 创建导入任务
   */
  async createImportTask(fileToken, title, folderId) {
    try {
      console.log("Creating import task for file token:", fileToken);
      const requestBody = {
        file_extension: "md",
        file_token: fileToken,
        type: "docx",
        file_name: title.endsWith(".md") ? title : `${title}.md`,
        point: {
          mount_type: 1,
          // 只支持 1
          mount_key: ""
          // 空字符串表示默认位置
        }
      };
      console.log("Import task request:", JSON.stringify(requestBody, null, 2));
      const response = await this.makeAuthenticatedRequest("/drive/v1/import_tasks", {
        method: "POST",
        body: JSON.stringify(requestBody)
      });
      console.log("Import task response:", JSON.stringify(response, null, 2));
      if (response.data && response.data.ticket) {
        return {
          success: true,
          ticket: response.data.ticket
        };
      } else {
        throw new Error(`Import task creation failed: ${response.msg || "Unknown error"}`);
      }
    } catch (error) {
      console.error("Create import task error:", error);
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * 创建导入任务（使用正确的根文件夹token）
   */
  async createImportTaskWithCorrectFolder(fileToken, title) {
    try {
      console.log("Creating import task with correct folder for file token:", fileToken);
      const requestBody = {
        file_extension: "md",
        file_token: fileToken,
        type: "docx",
        file_name: title,
        // title 已经在调用时处理过，不再添加 .md 扩展名
        point: {
          mount_type: 1,
          // 只支持 1
          mount_key: "nodcn2EG5YG1i5Rsh5uZs0FsUje"
          // 使用正确的根文件夹token
        }
      };
      console.log("Import task request with correct folder:", JSON.stringify(requestBody, null, 2));
      const response = await this.makeAuthenticatedRequest("/drive/v1/import_tasks", {
        method: "POST",
        body: JSON.stringify(requestBody)
      });
      console.log("Import task response:", JSON.stringify(response, null, 2));
      if (response.data && response.data.ticket) {
        return {
          success: true,
          ticket: response.data.ticket
        };
      } else {
        throw new Error(`Import task creation failed: ${response.msg || "Unknown error"}`);
      }
    } catch (error) {
      console.error("Create import task with correct folder error:", error);
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * 等待导入完成
   */
  async waitForImportCompletion(ticket) {
    try {
      console.log("Waiting for import completion, ticket:", ticket);
      const maxAttempts = 25;
      const startTime = Date.now();
      for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        console.log(`Checking import status, attempt ${attempt}/${maxAttempts}...`);
        const response = await this.makeAuthenticatedRequest(`/drive/v1/import_tasks/${ticket}`, {
          method: "GET"
        });
        console.log(`Import status check ${attempt}:`, JSON.stringify(response, null, 2));
        if (response.data && response.data.result) {
          const result = response.data.result;
          if (result.job_status === 3 || result.job_status === 0) {
            if (result.token) {
              const elapsedTime = Date.now() - startTime;
              console.log(`Import completed successfully in ${elapsedTime}ms, document token:`, result.token);
              return {
                success: true,
                documentToken: result.token
              };
            } else {
              console.warn("Import completed but no document token returned, continuing to wait...");
              if (attempt < maxAttempts) {
                await new Promise((resolve) => setTimeout(resolve, this.getDelayForAttempt(attempt)));
              }
            }
          } else if (result.job_status === 1) {
            console.log("Import still in progress, waiting...");
            if (attempt < maxAttempts) {
              await new Promise((resolve) => setTimeout(resolve, this.getDelayForAttempt(attempt)));
            }
          } else if (result.job_status === 2) {
            const errorMsg = result.job_error_msg || "Unknown error";
            console.warn(`Import shows failure status (${result.job_status}), but continuing to wait. Error: ${errorMsg}`);
            if (attempt <= 8) {
              console.log(`Attempt ${attempt}/8: Ignoring failure status, continuing to wait...`);
              if (attempt < maxAttempts) {
                await new Promise((resolve) => setTimeout(resolve, this.getDelayForAttempt(attempt)));
              }
            } else {
              console.error("Import failed after extended waiting:", errorMsg);
              throw new Error(`Import failed with status: ${result.job_status}, error: ${errorMsg}`);
            }
          } else {
            console.log(`Job status: ${result.job_status}, continuing to wait...`);
            if (attempt < maxAttempts) {
              await new Promise((resolve) => setTimeout(resolve, this.getDelayForAttempt(attempt)));
            }
          }
        } else {
          throw new Error("Invalid import status response");
        }
      }
      throw new Error("Import timeout: process took too long to complete");
    } catch (error) {
      console.error("Wait for import completion error:", error);
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * 获取渐进式延迟时间
   */
  getDelayForAttempt(attempt) {
    if (attempt <= 3) {
      return 1e3;
    } else if (attempt <= 8) {
      return 2e3;
    } else {
      return 3e3;
    }
  }
  /**
   * 等待导入完成（带超时控制）
   */
  async waitForImportCompletionWithTimeout(ticket, timeoutMs) {
    try {
      console.log(`Waiting for import completion with ${timeoutMs}ms timeout, ticket:`, ticket);
      const startTime = Date.now();
      const maxAttempts = Math.ceil(timeoutMs / 1e3);
      for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        const elapsedTime = Date.now() - startTime;
        if (elapsedTime >= timeoutMs) {
          console.warn(`Import timeout after ${elapsedTime}ms`);
          return {
            success: false,
            error: `Import timeout after ${timeoutMs}ms`
          };
        }
        console.log(`Checking import status, attempt ${attempt}/${maxAttempts}, elapsed: ${elapsedTime}ms...`);
        const response = await this.makeAuthenticatedRequest(`/drive/v1/import_tasks/${ticket}`, {
          method: "GET"
        });
        console.log(`Import status check ${attempt}:`, JSON.stringify(response, null, 2));
        if (response.data && response.data.result) {
          const result = response.data.result;
          if (result.job_status === 3 || result.job_status === 0) {
            if (result.token) {
              const totalTime = Date.now() - startTime;
              console.log(`Import completed successfully in ${totalTime}ms, document token:`, result.token);
              return {
                success: true,
                documentToken: result.token
              };
            } else {
              console.warn("Import completed but no document token returned, continuing to wait...");
              if (attempt < maxAttempts) {
                await new Promise((resolve) => setTimeout(resolve, this.getDelayForAttempt(attempt)));
              }
            }
          } else if (result.job_status === 1) {
            console.log("Import still in progress, waiting...");
            if (attempt < maxAttempts) {
              await new Promise((resolve) => setTimeout(resolve, this.getDelayForAttempt(attempt)));
            }
          } else if (result.job_status === 2) {
            const errorMsg = result.job_error_msg || "Unknown error";
            console.warn(`Import shows failure status (${result.job_status}), but continuing to wait. Error: ${errorMsg}`);
            if (attempt <= 8) {
              console.log(`Attempt ${attempt}/8: Ignoring failure status, continuing to wait...`);
              if (attempt < maxAttempts) {
                await new Promise((resolve) => setTimeout(resolve, this.getDelayForAttempt(attempt)));
              }
            } else {
              console.error("Import failed after extended waiting:", errorMsg);
              return {
                success: false,
                error: `Import failed with status: ${result.job_status}, error: ${errorMsg}`
              };
            }
          } else {
            console.log(`Job status: ${result.job_status}, continuing to wait...`);
            if (attempt < maxAttempts) {
              await new Promise((resolve) => setTimeout(resolve, this.getDelayForAttempt(attempt)));
            }
          }
        } else {
          throw new Error("Invalid import status response");
        }
      }
      return {
        success: false,
        error: `Import timeout after ${timeoutMs}ms`
      };
    } catch (error) {
      console.error("Import completion check error:", error);
      return {
        success: false,
        error: error.message
      };
    }
  }
  /**
   * 删除源文件
   */
  async deleteSourceFile(fileToken) {
    try {
      console.log("Deleting source file with token:", fileToken);
      const response = await this.makeAuthenticatedRequest(`/drive/v1/files/${fileToken}?type=file`, {
        method: "DELETE"
      });
      console.log("Delete file response:", JSON.stringify(response, null, 2));
      if (response.code === 0) {
        console.log("Source file deleted successfully");
      } else {
        throw new Error(`Delete file failed: ${response.msg || "Unknown error"}`);
      }
    } catch (error) {
      console.error("Delete source file error:", error);
      throw error;
    }
  }
  /**
   * 将 Markdown 转换为简单的文档块 (已废弃，保留以防需要)
   */
  convertMarkdownToSimpleBlocks(markdown) {
    const lines = markdown.split("\n");
    const blocks = [];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      if (line.trim() === "") {
        continue;
      }
      if (line.startsWith("### ")) {
        blocks.push({
          block_type: "heading3",
          heading3: {
            elements: [{
              text_run: {
                content: line.substring(4).trim()
              }
            }]
          }
        });
      } else if (line.startsWith("## ")) {
        blocks.push({
          block_type: "heading2",
          heading2: {
            elements: [{
              text_run: {
                content: line.substring(3).trim()
              }
            }]
          }
        });
      } else if (line.startsWith("# ")) {
        blocks.push({
          block_type: "heading1",
          heading1: {
            elements: [{
              text_run: {
                content: line.substring(2).trim()
              }
            }]
          }
        });
      } else {
        blocks.push({
          block_type: "text",
          text: {
            elements: [{
              text_run: {
                content: line
              }
            }]
          }
        });
      }
    }
    if (blocks.length === 0) {
      blocks.push({
        block_type: "text",
        text: {
          elements: [{
            text_run: {
              content: markdown || "\u6587\u6863\u5185\u5BB9"
            }
          }]
        }
      });
    }
    console.log("Converted to blocks:", blocks.length, "blocks");
    return blocks;
  }
};

// src/markdown-processor.ts
var MarkdownProcessor = class {
  /**
   * 处理 Markdown 内容
   * @param content 原始 Markdown 内容
   * @returns 处理后的 Markdown 内容
   */
  process(content) {
    let processedContent = content;
    processedContent = this.processWikiLinks(processedContent);
    processedContent = this.processBlockReferences(processedContent);
    processedContent = this.processTags(processedContent);
    processedContent = this.processEmbeds(processedContent);
    processedContent = this.processImages(processedContent);
    processedContent = this.cleanupWhitespace(processedContent);
    return processedContent;
  }
  /**
   * 处理 Obsidian 的双向链接 [[link]] 语法
   * 将其转换为普通的 Markdown 链接或文本
   */
  processWikiLinks(content) {
    return content.replace(/\[\[([^\]|]+)(\|([^\]]+))?\]\]/g, (match, link, _, displayText) => {
      const text = displayText || link;
      return `\u{1F4DD} ${text}`;
    });
  }
  /**
   * 处理 Obsidian 的块引用 ^blockId
   */
  processBlockReferences(content) {
    return content.replace(/\s*\^[a-zA-Z0-9-]+\s*$/gm, "");
  }
  /**
   * 处理 Obsidian 的标签 #tag
   * 保留标签，但确保格式正确
   */
  processTags(content) {
    return content;
  }
  /**
   * 处理 Obsidian 的嵌入内容 ![[file]]
   */
  processEmbeds(content) {
    return content.replace(/!\[\[([^\]]+)\]\]/g, (match, filename) => {
      return `> \u{1F4CE} \u5D4C\u5165\u6587\u4EF6\uFF1A${filename}`;
    });
  }
  /**
   * 处理图片链接
   * 确保网络图片链接格式正确，本地图片给出提示
   */
  processImages(content) {
    content = content.replace(/!\[([^\]]*)\]\(([^)]+)\)/g, (match, alt, url) => {
      if (this.isNetworkUrl(url)) {
        return match;
      } else {
        return `> \u{1F5BC}\uFE0F \u672C\u5730\u56FE\u7247\uFF1A${alt || url} (\u9700\u8981\u624B\u52A8\u4E0A\u4F20\u5230\u98DE\u4E66)`;
      }
    });
    content = content.replace(/!\[\[([^\]]+\.(png|jpg|jpeg|gif|svg|webp))\]\]/gi, (match, filename) => {
      return `> \u{1F5BC}\uFE0F \u672C\u5730\u56FE\u7247\uFF1A${filename} (\u9700\u8981\u624B\u52A8\u4E0A\u4F20\u5230\u98DE\u4E66)`;
    });
    return content;
  }
  /**
   * 检查 URL 是否为网络链接
   */
  isNetworkUrl(url) {
    return /^https?:\/\//.test(url);
  }
  /**
   * 清理多余的空行和空白字符
   */
  cleanupWhitespace(content) {
    content = content.replace(/[ \t]+$/gm, "");
    content = content.replace(/\n{3,}/g, "\n\n");
    content = content.trim();
    return content;
  }
  /**
   * 验证处理后的内容
   * @param content 处理后的内容
   * @returns 验证结果和错误信息
   */
  validate(content) {
    if (content.length === 0) {
      return { valid: false, error: "\u6587\u6863\u5185\u5BB9\u4E0D\u80FD\u4E3A\u7A7A" };
    }
    const estimatedSize = content.length * 2;
    const maxSize = 10 * 1024 * 1024;
    if (estimatedSize > maxSize) {
      return { valid: false, error: "\u6587\u6863\u5185\u5BB9\u8FC7\u5927\uFF0C\u8BF7\u51CF\u5C11\u5185\u5BB9\u540E\u91CD\u8BD5" };
    }
    return { valid: true };
  }
  /**
   * 提取文档摘要（用于预览）
   * @param content Markdown 内容
   * @param maxLength 最大长度
   * @returns 摘要文本
   */
  extractSummary(content, maxLength = 200) {
    let summary = content.replace(/#{1,6}\s+/g, "").replace(/\*\*([^*]+)\*\*/g, "$1").replace(/\*([^*]+)\*/g, "$1").replace(/`([^`]+)`/g, "$1").replace(/```[\s\S]*?```/g, "[\u4EE3\u7801\u5757]").replace(/!\[([^\]]*)\]\([^)]+\)/g, "[\u56FE\u7247: $1]").replace(/\[([^\]]+)\]\([^)]+\)/g, "$1").replace(/\n+/g, " ").trim();
    if (summary.length > maxLength) {
      summary = summary.substring(0, maxLength) + "...";
    }
    return summary;
  }
};

// main.ts
var FeishuSharePlugin = class extends import_obsidian4.Plugin {
  async onload() {
    console.log("Loading Feishu Share Plugin");
    await this.loadSettings();
    this.feishuApi = new FeishuApiService(this.settings);
    this.markdownProcessor = new MarkdownProcessor();
    this.addFeishuIcon();
    this.addCommand({
      id: "share-to-feishu",
      name: "\u5206\u4EAB\u5230\u98DE\u4E66",
      icon: "feishu-icon",
      callback: () => this.shareToFeishu()
    });
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file) => {
        if (file instanceof import_obsidian4.TFile && this.isMarkdownFile(file)) {
          menu.addItem((item) => {
            item.setTitle("\u5206\u4EAB\u5230\u98DE\u4E66").setIcon("feishu-icon").onClick(() => this.shareFileToFeishu(file));
          });
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor, view) => {
        if (view.file && this.isMarkdownFile(view.file)) {
          menu.addItem((item) => {
            item.setTitle("\u5206\u4EAB\u5230\u98DE\u4E66").setIcon("feishu-icon").onClick(() => this.shareToFeishu());
          });
        }
      })
    );
    this.addSettingTab(new FeishuShareSettingTab(this.app, this));
  }
  onunload() {
    console.log("Unloading Feishu Share Plugin");
  }
  /**
   * 加载插件设置
   */
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  /**
   * 保存插件设置
   */
  async saveSettings() {
    await this.saveData(this.settings);
    if (this.feishuApi) {
      this.feishuApi.updateSettings(this.settings);
    }
  }
  /**
   * 添加飞书图标
   */
  addFeishuIcon() {
    (0, import_obsidian4.addIcon)("feishu-icon", `
			<svg viewBox="0 0 24 24" fill="currentColor">
				<path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
			</svg>
		`);
  }
  /**
   * 检查文件是否为 Markdown 文件
   */
  isMarkdownFile(file) {
    return FILE_CONSTANTS.MARKDOWN_EXTENSIONS.some(
      (ext) => file.path.toLowerCase().endsWith(ext)
    );
  }
  /**
   * 分享当前活动文件到飞书
   */
  async shareToFeishu() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian4.Notice(MESSAGES.ERROR.NO_ACTIVE_FILE);
      return;
    }
    if (!this.isMarkdownFile(activeFile)) {
      new import_obsidian4.Notice(MESSAGES.ERROR.NOT_MARKDOWN_FILE);
      return;
    }
    await this.shareFileToFeishu(activeFile);
  }
  /**
   * 分享指定文件到飞书
   */
  async shareFileToFeishu(file) {
    try {
      if (!this.settings.accessToken) {
        new import_obsidian4.Notice(MESSAGES.ERROR.AUTH_REQUIRED);
        return;
      }
      const notice = new import_obsidian4.Notice(MESSAGES.INFO.SHARING, 0);
      const content = await this.app.vault.read(file);
      const processedContent = this.markdownProcessor.process(content);
      const title = file.basename;
      const result = await this.feishuApi.createDocument(
        title,
        processedContent,
        this.settings.defaultFolderId
      );
      notice.hide();
      if (result.success && result.docUrl) {
        const successNotice = new import_obsidian4.Notice(
          `${MESSAGES.SUCCESS.SHARE_SUCCESS}${result.docTitle}`,
          1e4
        );
        successNotice.noticeEl.addEventListener("click", () => {
          window.open(result.docUrl, "_blank");
        });
        const copyButton = successNotice.noticeEl.createEl("button", {
          text: "\u590D\u5236\u94FE\u63A5",
          cls: "mod-cta"
        });
        copyButton.addEventListener("click", (e) => {
          e.stopPropagation();
          navigator.clipboard.writeText(result.docUrl);
          new import_obsidian4.Notice("\u94FE\u63A5\u5DF2\u590D\u5236\u5230\u526A\u8D34\u677F");
        });
      } else {
        new import_obsidian4.Notice(`${MESSAGES.ERROR.SHARE_FAILED}\uFF1A${result.error}`);
      }
    } catch (error) {
      console.error("Share to Feishu error:", error);
      new import_obsidian4.Notice(`${MESSAGES.ERROR.SHARE_FAILED}\uFF1A${error.message}`);
    }
  }
  /**
   * 刷新设置页面显示
   */
  refreshSettingsDisplay() {
    console.log("Authorization completed, settings may need manual refresh");
  }
};
